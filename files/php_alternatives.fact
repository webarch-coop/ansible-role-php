#!/usr/bin/env bash
# Ansible managed

set -euo pipefail

jo $(
  echo php=$(
    if [[ -L "/usr/bin/php" ]]
    then
      jo state=present alternatives=$(
        declare -a alternatives=()
        readarray -t alternatives < <(update-alternatives --query php | grep -e '^Alternative' | sed 's;Alternative: /usr/bin/php;;')
        declare -a priorities=()
        readarray -t priorities < <(update-alternatives --query php | grep -e '^Priority' | sed 's/Priority: //')
        jo $(
          for i in $(seq 0 $(("${#alternatives[@]}"-1)))
          do
            echo "${alternatives[${i}]}=${priorities[${i}]}"
          done
        )
      )
    else
      jo state=absent
    fi
  )
  echo phar=$(
    if [[ -L "/usr/bin/phar" ]]
    then
      jo state=present alternatives=$(
        declare -a alternatives=()
        readarray -t alternatives < <(update-alternatives --query phar | grep -e '^Alternative' | sed 's;Alternative: /usr/bin/phar;;')
        declare -a priorities=()
        readarray -t priorities < <(update-alternatives --query phar | grep -e '^Priority' | sed 's/Priority: //')
        jo $(
          for i in $(seq 0 $(("${#alternatives[@]}"-1)))
          do
            echo "${alternatives[${i}]}=${priorities[${i}]}"
          done
        )
      )
    else
      jo state=absent
    fi
  )
  echo phar.phar=$(
    if [[ -L "/usr/bin/phar.phar" ]]
    then
      jo state=present alternatives=$(
        declare -a alternatives=()
        readarray -t alternatives < <(update-alternatives --query phar.phar | grep -e '^Alternative' | sed 's;Alternative: /usr/bin/phar.phar;;')
        declare -a priorities=()
        readarray -t priorities < <(update-alternatives --query phar.phar | grep -e '^Priority' | sed 's/Priority: //')
        jo $(
          for i in $(seq 0 $(("${#alternatives[@]}"-1)))
          do
            echo "${alternatives[${i}]}=${priorities[${i}]}"
          done
        )
      )
    else
      jo state=absent
    fi
  )
  echo php-fpm.sock=$(
    if [[ -L "/run/php/php-fpm.sock" ]]
    then
      jo state=present alternatives=$(
        declare -a alternatives=()
        readarray -t alternatives < <(update-alternatives --query php-fpm.sock | grep -e '^Alternative' | sed 's;Alternative: /run/php/php;;' | sed 's/-fpm.sock$//')
        declare -a priorities=()
        readarray -t priorities < <(update-alternatives --query php-fpm.sock | grep -e '^Priority' | sed 's/Priority: //')
        jo $(
          for i in $(seq 0 $(("${#alternatives[@]}"-1)))
          do
            echo "${alternatives[${i}]}=${priorities[${i}]}"
          done
        )
      )
    else
      jo state=absent
    fi
  )
)
