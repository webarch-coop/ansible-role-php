# Copyright 2019-2024 Chris Croome
#
# This file is part of the Webarchitects PHP Ansible role.
#
# The Webarchitects PHP Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PHP Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PHP Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PHP packages configured
  block:

    - name: Debug PHP packages names listed as absent
      ansible.builtin.debug:
        var: php_pkg_absent
        verbosity: "{% if ansible_check_mode | bool and php_pkg_absent != [] %}1{% elif php_pkg_absent != [] %}2{% else %}3{% endif %}"
      when: php_pkg_absent is defined

    - name: Set a fact for installed PHP packages that are to be removed
      ansible.builtin.set_fact:
        php_pkg_remove: "{{ ansible_local.dpkg.installed | ansible.builtin.intersect(php_pkg_absent) | default([]) }}"

    - name: Debug installed PHP packages that are to be removed
      ansible.builtin.debug:
        var: php_pkg_remove
        verbosity: "{% if ansible_check_mode | bool and php_pkg_remove != [] %}0{% elif php_pkg_remove != [] %}1{% else %}2{% endif %}"
      when: php_pkg_remove is defined

    - name: Debug PHP versions absent
      ansible.builtin.debug:
        var: php_ver_absent
        verbosity: "{% if ansible_check_mode | bool and php_ver_absent != [] %}1{% elif php_ver_absent != [] %}2{% else %}3{% endif %}"
      when: php_ver_absent is defined

    - name: Debug PHP versions absent regex
      ansible.builtin.debug:
        var: php_ver_absent_regex
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      when: php_ver_absent_regex is defined

    - name: Set a fact for PHP packages that should be removed due to their version
      ansible.builtin.set_fact:
        php_ver_pkg_remove: "{{ php_ver_pkg_remove + ansible_local.dpkg.installed | select('regex', php_regex) }}"
      loop: "{{ php_ver_absent_regex }}"
      loop_control:
        loop_var: php_regex

    - name: Debug installed PHP packages to remove due to their version
      ansible.builtin.debug:
        var: php_ver_pkg_remove
        verbosity: "{% if ansible_check_mode | bool and php_ver_pkg_remove != [] %}0{% elif php_ver_pkg_remove != [] %}1{% else %}2{% endif %}"
      when: php_ver_pkg_remove is defined

    - name: Set a fact for all installed PHP packages that should be removed
      ansible.builtin.set_fact:
        php_pkg_rm: "{{ php_pkg_remove + php_ver_pkg_remove | ansible.builtin.unique }}"

    - name: Debug all installed PHP packages to be removed
      ansible.builtin.debug:
        var: php_pkg_rm
        verbosity: "{% if ansible_check_mode | bool or php_pkg_rm != [] %}0{% else %}1{% endif %}"
      when: php_pkg_rm != php_pkg_remove

    - name: Debug PHP packages present
      ansible.builtin.debug:
        var: php_pkg_present
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_pkg_present is defined

    - name: Debug PHP packages installed
      ansible.builtin.debug:
        var: ansible_local.dpkg.installed
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_pkg_present is defined

    - name: Set a fact for PHP packages that should be installed
      ansible.builtin.set_fact:
        php_pkg_install: "{{ php_pkg_present | ansible.builtin.difference(ansible_local.dpkg.installed) }}"

    - name: Debug PHP packages to install
      ansible.builtin.debug:
        var: php_pkg_install
        verbosity: "{% if ansible_check_mode | bool and php_pkg_install != [] %}0{% elif php_pkg_install != [] %}1{% else %}2{% endif %}"
      when: php_pkg_install is defined

    - name: PHP packages absent
      ansible.builtin.apt:
        pkg: "{{ php_pkg_rm }}"
        purge: false
        state: absent
      environment:
        DEBIAN_FRONTEND: noninteractive
      register: php_packages_removed_first_run
      when: php_pkg_rm != []

    - name: Debug PHP packages absent result  # noqa no-handler
      ansible.builtin.debug:
        var: php_packages_removed_first_run.stdout_lines
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_packages_removed_first_run.changed | bool

    - name: PHP packages present  # noqa: package-latest
      ansible.builtin.apt:
        pkg: "{{ php_pkg_install }}"
        state: latest
        dpkg_options: force-confmiss
        update_cache: true
      environment:
        DEBIAN_FRONTEND: noninteractive
        UCF_FORCE_CONFFMISS: "1"
      register: php_packages_installed
      when: php_pkg_install != []

    - name: Debug PHP packages present result  # noqa no-handler
      ansible.builtin.debug:
        var: php_packages_installed.stdout_lines
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_packages_installed.changed | bool

    - name: PHP packages absent
      ansible.builtin.apt:
        pkg: "{{ php_pkg_absent }}"
        purge: false
        state: absent
      environment:
        DEBIAN_FRONTEND: noninteractive
      register: php_packages_removed_second_run
      when: php_pkg_absent != []

    - name: Debug PHP packages absent result  # noqa no-handler
      ansible.builtin.debug:
        var: php_packages_removed_second_run.stdout_lines
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_packages_removed_second_run.changed | bool

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 0
      check_mode: false
      changed_when: false
      tags:
        - molecule-idempotence-notest

    - name: Dist upgrade
      ansible.builtin.apt:
        upgrade: dist
        autoclean: true
        autoremove: true
        update_cache: false
      register: php_dist_upgrade
      tags:
        - molecule-idempotence-notest

    - name: Debug dist upgrade result  # noqa no-handler
      ansible.builtin.debug:
        var: php_dist_upgrade.stdout_lines
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when:
        - php_dist_upgrade.changed is defined
        - php_dist_upgrade.changed | bool

    - name: Apt clean
      ansible.builtin.include_tasks: apt_clean.yml
      when: >-
        ( ansible_version.full is version('2.13', '>=') ) and
        ( ( ( php_packages_installed.changed  is defined ) and ( php_packages_installed.changed | bool ) ) or
        ( ( php_packages_removed_first_run.changed is defined ) and ( php_packages_removed_first_run.changed | bool ) ) or
        ( ( php_packages_removed_second_run.changed is defined ) and ( php_packages_removed_second_run.changed | bool ) ) )

    - name: Ensure that all required PHP packages are present  # noqa: package-latest
      ansible.builtin.apt:
        pkg: "{{ php_pkg_present }}"
        state: latest
        dpkg_options: force-confmiss
        update_cache: true
      environment:
        DEBIAN_FRONTEND: noninteractive
        UCF_FORCE_CONFFMISS: "1"
      when: php_pkg_present != []
      register: php_packages_present

    - name: Re-read local facts after updating PHP packages
      ansible.builtin.setup:
        filter: ansible_local
      when: >-
        ( ( php_packages_removed_first_run.changed is defined ) and
        ( php_packages_removed_first_run.changed | bool ) ) or
        ( ( php_packages_installed.changed is defined ) and
        ( php_packages_installed.changed | bool ) ) or
        ( ( php_packages_removed_second_run.changed is defined ) and
        ( php_packages_removed_second_run.changed | bool ) ) or
        ( ( php_dist_upgrade.changed is defined ) and
        ( php_dist_upgrade.changed | bool ) ) or
        ( ( php_apt_clean.changed is defined ) and
        ( php_apt_clean.changed | bool ) ) or
        ( ( php_packages_present.changed is defined ) and
        ( php_packages_present.changed | bool ) )

    - name: Set facts for PHP-FPM versions present
      ansible.builtin.set_fact:
        php_fpm_packages_present: "{{ php_pkg_present | select('regex', '^php[0-9]{1,2}[.][0-9]{1,2}-fpm$') | sort }}"
        php_fpm_versions_present: "{{ php_pkg_present | select('regex', '^php[0-9]{1,2}[.][0-9]{1,2}-fpm$') | map('regex_replace', '^php') | map('regex_replace', '-fpm$') | sort }}"

    - name: Debug PHP-FPM packages present
      ansible.builtin.debug:
        var: php_fpm_packages_present
        verbosity: "{% if ansible_check_mode | bool and php_fpm_packages_present != [] %}1{% elif php_fpm_packages_present != [] %}2{% else %}3{% endif %}"
      when: php_fpm_packages_present is defined

    - name: Debug PHP-FPM versions present
      ansible.builtin.debug:
        var: php_fpm_versions_present
        verbosity: "{% if ansible_check_mode | bool and php_fpm_versions_present != [] %}1{% elif php_fpm_versions_present != [] %}2{% else %}3{% endif %}"
      when: php_fpm_versions_present is defined

    - name: Check that all PHP-FPM packages present are installed
      ansible.builtin.assert:
        that:
          - php_fpm_package in ansible_local.dpkg.installed
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      loop: "{{ php_fpm_packages_present }}"
      loop_control:
        loop_var: php_fpm_package
      when:
        - php_fpm_packages_present is defined
        - php_fpm_packages_present != []

    - name: Debug php_init
      ansible.builtin.debug:
        var: php_init
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug php_fpm_versions_present
      ansible.builtin.debug:
        var: php_fpm_versions_present
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Include systemd tasks for each version of PHP-FPM present
      ansible.builtin.include_tasks: fpm.yml
      loop: "{{ php_fpm_versions_present }}"
      loop_control:
        loop_var: php_fpm_version
      when:
        - php_init is defined
        - php_init == "systemd"
        - php_fpm_versions_present is defined
        - php_fpm_versions_present != []

  tags:
    - php
    - php_pkg
...
