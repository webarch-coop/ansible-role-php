# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects PHP Ansible role.
#
# The Webarchitects PHP Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PHP Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PHP Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PHP packages configured
  block:

    - name: Debug PHP packages names listed as absent
      ansible.builtin.debug:
        var: php_pkg_absent
        verbosity: "{% if ansible_check_mode | bool and php_pkg_absent != [] %}1{% elif php_pkg_absent != [] %}2{% else %}3{% endif %}"
      when: php_pkg_absent is defined

    - name: Set a fact for installed PHP packages that are to be removed
      ansible.builtin.set_fact:
        php_pkg_remove: "{{ ansible_local.dpkg.installed | ansible.builtin.intersect(php_pkg_absent) | default([]) }}"

    - name: Debug installed PHP packages that are to be removed
      ansible.builtin.debug:
        var: php_pkg_remove
        verbosity: "{% if ansible_check_mode | bool and php_pkg_remove != [] %}0{% elif php_pkg_remove != [] %}1{% else %}2{% endif %}"
      when: php_pkg_remove is defined

    - name: Debug PHP versions absent
      ansible.builtin.debug:
        var: php_ver_absent
        verbosity: "{% if ansible_check_mode | bool and php_ver_absent != [] %}1{% elif php_ver_absent != [] %}2{% else %}3{% endif %}"
      when: php_ver_absent is defined

    - name: Debug PHP versions absent regex
      ansible.builtin.debug:
        var: php_ver_absent_regex
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      when: php_ver_absent_regex is defined

    - name: Set a fact for PHP packages that should be removed due to their version
      ansible.builtin.set_fact:
        php_ver_pkg_remove: "{{ php_ver_pkg_remove + ansible_local.dpkg.installed | select('regex', php_regex) }}"
      loop: "{{ php_ver_absent_regex }}"
      loop_control:
        loop_var: php_regex

    - name: Debug installed PHP packages to remove due to their version
      ansible.builtin.debug:
        var: php_ver_pkg_remove
        verbosity: "{% if ansible_check_mode | bool and php_ver_pkg_remove != [] %}0{% elif php_ver_pkg_remove != [] %}1{% else %}2{% endif %}"
      when: php_ver_pkg_remove is defined

    - name: Set a fact for all installed PHP packages that should be removed
      ansible.builtin.set_fact:
        php_pkg_rm: "{{ php_pkg_remove + php_ver_pkg_remove | ansible.builtin.unique }}"

    - name: Debug all installed PHP packages to be removed
      ansible.builtin.debug:
        var: php_pkg_rm
        verbosity: "{% if ansible_check_mode | bool or php_pkg_rm != [] %}0{% else %}1{% endif %}"
      when: php_pkg_rm != php_pkg_remove

    - name: Debug PHP packages present
      ansible.builtin.debug:
        var: php_pkg_present
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_pkg_present is defined

    - name: Debug PHP packages installed
      ansible.builtin.debug:
        var: ansible_local.dpkg.installed
        verbosity: "{% if ansible_check_mode | bool and php_pkg_present != [] %}1{% elif php_pkg_present != [] %}2{% else %}3{% endif %}"
      when: php_pkg_present is defined

    - name: Set a fact for PHP packages that should be installed
      ansible.builtin.set_fact:
        php_pkg_install: "{{ php_pkg_present | ansible.builtin.difference(ansible_local.dpkg.installed) }}"

    - name: Debug PHP packages to install
      ansible.builtin.debug:
        var: php_pkg_install
        verbosity: "{% if ansible_check_mode | bool and php_pkg_install != [] %}0{% elif php_pkg_install != [] %}1{% else %}2{% endif %}"
      when: php_pkg_install is defined

    - name: PHP packages absent
      ansible.builtin.apt:
        pkg: "{{ php_pkg_rm }}"
        purge: false
        state: absent
      register: php_packages_removed
      when: php_pkg_rm != []

    - name: PHP packages present
      ansible.builtin.apt:
        pkg: "{{ php_pkg_install }}"
        state: latest
        dpkg_options: force-confmiss
        update_cache: true
      environment:
        UCF_FORCE_CONFFMISS: "1"
      register: php_packages_installed
      when: php_pkg_install != []

    - name: Apt clean
      ansible.builtin.include_tasks: apt_clean.yml
      when: >-
        ( ansible_version.full is version('2.13', '>=') ) and
        ( ( ( php_packages_installed is defined ) and ( php_packages_installed.changed | bool ) ) or
        ( ( php_packages_removed is defined ) and ( php_packages_removed.changed | bool ) ) )

  tags:
    - php
    - php_pkg
...
