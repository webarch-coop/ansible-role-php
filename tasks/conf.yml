# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects PHP Ansible role.
#
# The Webarchitects PHP Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PHP Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PHP Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PHP configuration
  block:

    - name: Find the existing PHP versions directories
      ansible.builtin.find:
        paths: /etc/php
        file_type: directory
        recurse: false
      register: php_etc_php_find_dirs

    - name: Debug the existing PHP versions directories found
      ansible.builtin.debug:
        var: php_etc_php_find_dirs
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for the existing PHP version directories
      ansible.builtin.set_fact:
        php_conf_dirs_existing: "{{ php_etc_php_find_dirs | community.general.json_query('files[].path') }}"

    - name: Debug existing PHP versions directories
      ansible.builtin.debug:
        var: php_conf_dirs_existing
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug PHP version configuration directories which should be absent
      ansible.builtin.debug:
        var: php_conf_dirs_absent
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for existing PHP version configuration directories which should be absent
      ansible.builtin.set_fact:
        php_conf_dirs_remove: "{{ php_conf_dirs_existing | ansible.builtin.intersect(php_conf_dirs_absent) }}"

    - name: Debug existing PHP versions configuration directories to be deleted
      ansible.builtin.debug:
        var: php_conf_dirs_remove
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Find the existing PHP configuration files
      ansible.builtin.find:
        paths: /etc/php
        file_type: file
        recurse: true
        patterns: '*.ini'
      register: php_etc_php_find_files

    - name: Debug existing PHP configuration files
      ansible.builtin.debug:
        var: php_etc_php_find_files
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for the existing PHP configuration files
      ansible.builtin.set_fact:
        php_conf_files_existing: "{{ php_etc_php_find_files | community.general.json_query('files[].path') }}"

    - name: Debug existing PHP configuration files
      ansible.builtin.debug:
        var: php_conf_files_existing
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Debug PHP configuration files set to be edited
      ansible.builtin.debug:
        var: php_conf_files_edited
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: All files that are set to be edited need to already exist
      ansible.builtin.debug:
        msg: >-
          Note that {% if ansible_check_mode | bool %}since Ansible is being run in check mode, please run with
          '-t php_apt' install packages and then '-t php_cfg --check' to check the configiguration.{% else %}
          the state for files that don't exist needs to be 'present' or 'templated', not 'edited'.{% endif %}
          The following PHP conf files are set to be edited when they don't exist
          {% for php_v in php_conf_files_edited | ansible.builtin.difference(php_conf_files_existing) %}{{ php_v }}{{ ', ' if not loop.last }}{% endfor %}.
      when: php_conf_files_edited | ansible.builtin.difference(php_conf_files_existing) | length != 0

    - name: Ensure that all files that are set to be edited already exist
      ansible.builtin.assert:
        that:
          - php_conf_files_edited | ansible.builtin.difference(php_conf_files_existing) | length == 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: >-
          PHP configurations files that don't exist can't be edited
          {% for php_v in php_conf_files_edited | ansible.builtin.difference(php_conf_files_existing) %}{{ php_v }}{{ ', ' if not loop.last }}{% endfor %}.

    - name: Debug PHP configuration files which should be absent
      ansible.builtin.debug:
        var: php_conf_files_absent
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for existing PHP configuration files that should be absent
      ansible.builtin.set_fact:
        php_conf_files_remove: "{{ php_conf_files_existing | ansible.builtin.intersect(php_conf_files_absent) }}"

    - name: Debug existing PHP configuration files to be deleted
      ansible.builtin.debug:
        var: php_conf_files_remove
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Set a fact for existing PHP configuration files and directories to be deleted
      ansible.builtin.set_fact:
        php_conf_rm: "{{ php_conf_dirs_remove + php_conf_files_remove }}"

    - name: Debug PHP configuration paths to be deleted
      ansible.builtin.debug:
        var: php_conf_rm
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: PHP configuration paths absent
      ansible.builtin.file:
        path: "{{ php_rm }}"
        state: absent
      loop: "{{ php_conf_rm }}"
      loop_control:
        loop_var: php_rm
      register: php_conf_removed
      when:
        - php_conf_rm is defined
        - php_conf_rm != []

    - name: Debug PHP configuration directories which should be present
      ansible.builtin.debug:
        var: php_conf_dirs_present
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for PHP configuration directories that need to be created
      ansible.builtin.set_fact:
        php_conf_dirs_create: "{{ php_conf_dirs_present | ansible.builtin.difference(php_conf_dirs_existing) }}"

    - name: Debug PHP configuration directories that need to be created
      ansible.builtin.debug:
        var: php_conf_dirs_create
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: PHP configuration directories present
      ansible.builtin.file:
        path: "{{ php_dir }}"
        state: directory
        mode: 0755
        owner: root
        group: root
      loop: "{{ php_conf_dirs_create }}"
      loop_control:
        loop_var: php_dir
      register: php_conf_dir_created
      when:
        - php_conf_dirs_create is defined
        - php_conf_dirs_create != []

    - name: Debug PHP configuration files set to be present
      ansible.builtin.debug:
        var: php_conf_files_present
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for all PHP configuration files that should be edited
      ansible.builtin.set_fact:
        php_conf_files_edit: "{{ php_conf_files_edited + php_conf_files_present | ansible.builtin.intersect(php_conf_files_existing) }}"

    - name: Debug all PHP configuration files that should be edited
      ansible.builtin.debug:
        var: php_conf_files_edit
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Include PHP configuration file edited tasks
      ansible.builtin.include_tasks: file_edited.yml
      loop: "{{ php_conf_files_edit }}"
      loop_control:
        loop_var: php_conf_file
      when:
        - php_conf_files_edit is defined
        - php_conf_files_edit != []

    - name: Debug PHP configuration files set to be templated
      ansible.builtin.debug:
        var: php_conf_files_templated
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: Set a fact for all PHP configuration files that should be templated
      ansible.builtin.set_fact:
        php_conf_files_template: "{{ php_conf_files_templated + php_conf_files_present | ansible.builtin.difference(php_conf_files_existing) }}"

    - name: Debug all PHP configuration files that should be templated
      ansible.builtin.debug:
        var: php_conf_files_template
        verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

    - name: Include PHP configuration file templated tasks
      ansible.builtin.include_tasks: file_templated.yml
      loop: "{{ php_conf_files_template }}"
      loop_control:
        loop_var: php_conf_file
      when:
        - php_conf_files_template is defined
        - php_conf_files_template != []

  tags:
    - php
    - php_cfg
    - php_conf
...
