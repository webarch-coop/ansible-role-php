---
- name: Install and configure PHP
  block:

    # When in a docker container php_ps.stdout == "sh"
    # When in a chroot rc is 47 and stderr is "Error, do this: mount -t proc proc /proc"
    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      changed_when: false
      check_mode: false
      register: php_ps
      failed_when: ( php_ps.rc != 0 ) and ( php_ps.rc != 47 )

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        php_init: null
      when: php_ps.rc == 47

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        php_init: "{{ php_ps.stdout }}"
      when: php_ps.rc == 0

    - name: Check that depreciated variables are not used
      ansible.builtin.assert:
        that:
          - php_allow_local_infile is not defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that variables are booleans
      ansible.builtin.assert:
        that:
          - php_allow_url_include | type_debug == "bool"
          - php_mysqli_allow_local_infile | type_debug == "bool"
          - phpcli_allow_local_infile | type_debug == "bool"
          - php_opcache_enable | type_debug == "bool"
          - php_opcache_validate_permission | type_debug == "bool"
          - php_opcache_validate_root | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that the distro is Debian Bullseye, Buster or Stretch or Ubuntu Focal or Bionic
      ansible.builtin.assert:
        that:
          - ansible_distribution_release is defined
          - ansible_distribution_release is regex("^bionic|bullseye|buster|focal|stretch$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    # - name: Include local facts tasks
    #   ansible.builtin.include_tasks: local_facts.yml

    - name: PHP packages present
      ansible.builtin.apt:
        pkg: "{{ php_packages }}"
        state: present
        update_cache: true
      notify: Restart php-fpm

    - name: Which phpquery
      ansible.builtin.command: which phpquery
      check_mode: false
      changed_when: false
      register: php_phpquery_path
      failed_when: php_phpquery_path.rc != 0

    - name: Run phpquery to get the PHP version
      ansible.builtin.command: phpquery -V
      args:
        strip_empty_ends: true
      check_mode: false
      changed_when: false
      register: php_phpquery_version
      failed_when: >
        ( php_phpquery_version.stdout_lines | count > 1 ) or
        ( php_phpquery_version.stdout is not version('7.0', '>=') )

    - name: Set a variable for the PHP version
      ansible.builtin.set_fact:
        php_version: "{{ php_phpquery_version.stdout | trim }}"

    - name: Debug the array of PHP versioned packages
      ansible.builtin.debug:
        var: php_versioned_packages
        verbosity: 2
      when: php_versioned_packages is defined

    - name: Set an array for the PHP packages with version numbers in their names
      ansible.builtin.set_fact:
        php_version_packages: "{{ php_versioned_packages | map('regex_replace', '^(.*)', 'php' + php_version + '-\\1') | list }}"

    - name: Debug the array for the PHP packages with version numbers in their names
      ansible.builtin.debug:
        var: php_version_packages
        verbosity: 2
      when: php_version_packages is defined

    - name: "Packages installed for PHP {{ php_version }} "
      ansible.builtin.apt:
        pkg: "{{ php_version_packages }}"
        state: present
        update_cache: false
      notify: Restart php-fpm

    - name: APCu enabled
      ansible.builtin.command: phpenmod apcu
      when: ( "apcu" in php_versioned_packages )
      notify: Restart php-fpm

    - name: APCu disabled
      ansible.builtin.command: phpdismod apcu
      when: ( "apcu" not in php_versioned_packages )
      notify: Restart php-fpm

    - name: "PHP-FPM ini config /etc/php/{{ php_version }}/fpm/php.ini in place"
      ansible.builtin.template:
        src: "templates/php.ini.j2"
        dest: "/etc/php/{{ php_version }}/fpm/php.ini"
        mode: 0644
        backup: true
      notify: Restart php-fpm

    - name: "PHP CLI config /etc/php/{{ php_version }}/cli/php.ini in place"
      ansible.builtin.template:
        src: "templates/cli_php.ini.j2"
        dest: "/etc/php/{{ php_version }}/cli/php.ini"
        mode: 0644
        backup: true
      notify: Restart php-fpm

    - name: PHP-FPM www.conf pool disabled
      ansible.builtin.file:
        path: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
        state: absent
      when: ( php_www_pool_enabled is defined ) and ( not php_www_pool_enabled )
      notify: Restart php-fpm

    - name: Check and enable the www pool
      block:

        - name: Include www pool server variable checks
          ansible.builtin.include_tasks: pool_check.yml
          when: php_www_pool_pm == "dynamic"
          vars:
            php_pm: "{{ php_www_pool_pm }}"
            php_pm_max_children: "{{ php_www_pool_pm_max_children }}"
            php_pm_start_servers: "{{ php_www_pool_pm_start_servers }}"
            php_pm_min_spare_servers: "{{ php_www_pool_pm_min_spare_servers }}"
            php_pm_max_spare_servers: "{{ php_www_pool_pm_max_spare_servers }}"

        - name: PHP-FPM www.conf pool enabled
          ansible.builtin.template:
            src: templates/www.conf.j2
            dest: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
            mode: 0644
            owner: root
            group: root
            backup: true
          notify: Restart php-fpm

      when: ( php_www_pool_enabled is not defined ) or ( php_www_pool_enabled is defined and php_www_pool_enabled )

    - name: Check the PHP-FPM configuration
      ansible.builtin.command: "php-fpm{{ php_version }} --test"
      check_mode: false
      changed_when: false
      register: php_test
      failed_when: ( "test is successful" not in php_test.stderr )
      notify: Restart php-fpm

    - name: Check that /usr/bin/crontab exists
      ansible.builtin.stat:
        path: /usr/bin/crontab
      register: php_crontab

    # The log rotates once a week by default so this is a fairly crude metric but
    # it is good enough to flag up how often the max_children limits are being hit
    - name: Cron job to email root the results of grepping the logs for PHP-FPM pm.max_children
      ansible.builtin.cron:
        name: "Grep PHP{{ php_version }} log for pm.max_children"
        hour: "06"
        minute: "01"
        job: "grep 'server reached pm.max_children setting' /var/log/php{{ php_version }}-fpm.log | awk '{ print $5 }' | sed 's/]$//' | sort | uniq -c | sort -n"
        state: "{% if php_log_grep %}present{% else %}absent{% endif %}"
      when: php_crontab.stat.exists

  tags:
    - php
...
