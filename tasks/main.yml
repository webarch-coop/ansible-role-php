---
- name: Install and configure PHP
  block:

    - name: Include local facts tasks
      ansible.builtin.include_tasks: local_facts.yml

    - name: Install PHP
      block:

        - name: Include apt repo config for Sury PHP packages
          ansible.builtin.include_tasks: apt.yml

        - name: PHP packages absent
          ansible.builtin.apt:
            pkg: "{{ ansible_local.php.packages | difference(php.packages) }}"
            state: absent
            autoclean: true
            autoremove: true
          register: php_packages_absent

        - name: PHP packages present
          ansible.builtin.apt:
            pkg: "{{ php.packages | difference(ansible_local.php.packages) }}"
            state: present
          register: php_packages_present

        - name: Re-read Ansible local facts
          ansible.builtin.setup:
            filter: ansible_local
          when: ( php_packages_absent.changed | bool ) or ( php_packages_present.changed | bool )

      when: ( ansible_local.php.packages is not defined ) or ( ansible_local.php.packages != php.packages )

    - name: Debug fail
      ansible.builtin.fail:

    - name: Configure PHP
      block:

        - name: Include check tasks
          ansible.builtin.include_tasks: checks.yml

        - name: PHP versions absent
          block:

            - name: "PHP versioned packages absent"
              ansible.builtin.apt:
                pkg: "php{{ version }}*"
                state: absent
                purge: true
                autoclean: true
                autoremove: true
              loop: "{{ php_versions_absent }}"
              loop_control:
                loop_var: version
                label: "{{ version }}"

            - name: "PHP versioned config files absent"
              ansible.builtin.file:
                path: "/etc/php/{{ version }}/"
                state: absent
              loop: "{{ php_versions_absent }}"
              loop_control:
                loop_var: version
                label: "{{ version }}"

          when: ( php_versions_absent is defined ) and ( php_versions_absent != [] )

        - name: PHP versions present
          block:

            - name: PHP versioned packages absent
              ansible.builtin.apt:
                pkg: "{{ php_versions[version].packages_absent }}"
                state: absent
              loop: "{{ php_versions_proposed }}"
              loop_control:
                loop_var: version
                label: "{{ version }}"
              when: ( php_versions[version].packages_absent is defined ) and ( php_versions[version].packages_absent != [] )

            - name: PHP SAPIs absent
              ansible.builtin.include_tasks: sapi_absent.yml
              loop: "{{ php_versions_proposed }}"
              loop_control:
                loop_var: version
                label: "{{ version }}"
              when: php_versions[version].sapis is defined

            - name: PHP versioned packages present
              ansible.builtin.apt:
                pkg: "{{ php_versions[version].packages_present }}"
                state: present
              loop: "{{ php_versions_proposed }}"
              loop_control:
                loop_var: version
                label: "{{ version }}"
              when: ( php_versions[version].packages_present is defined ) and ( php_versions[version].packages_present != [] )

          when: ( php_versions_proposed is defined ) and ( php_versions_proposed != [] )

        - name: PHP packages present
          ansible.builtin.apt:
            pkg: "{{ php_packages }}"
            state: present
            update_cache: true

        - name: Loop through the PHP proposed versions to include tasks for each SAPI which will include tasks to enable / disable modules
          ansible.builtin.include_tasks: sapis.yml
          loop: "{{ php_versions_proposed }}"
          loop_control:
            loop_var: version
            label: "{{ version }}"
          when: ( php_versions_proposed is defined ) and ( php_versions_proposed != [] )

        # TODO
        #
        # Write php.ini files
        #
        # Use update-alternatives to set the default version
        #
        # Disable the www pool for all versions but the default PHP version

        - name: Set an array for the PHP packages with version numbers in their names
          ansible.builtin.set_fact:
            php_version_packages: "{{ php_version_packages | default([]) }} + [ 'php{{ php_version }}-{{ php_package }}' ]"
          loop: "{{ php_versioned_packages }}"
          loop_control:
            loop_var: php_package
            label: "{{ php_package }}"

        - name: "PHP {{ php_version }} packages installed"
          ansible.builtin.apt:
            pkg: "{{ php_version_packages | default([]) }}"
            state: present
            update_cache: false
          notify: Restart php-fpm

        - name: APCu enabled
          ansible.builtin.command: phpenmod apcu
          when: ( "apcu" in php_versioned_packages )
          notify: Restart php-fpm

        - name: APCu disabled
          ansible.builtin.command: phpdismod apcu
          when: ( "apcu" not in php_versioned_packages )
          notify: Restart php-fpm

        - name: "PHP-FPM ini config /etc/php/{{ php_version }}/fpm/php.ini in place"
          ansible.builtin.template:
            src: "templates/php.ini.j2"
            dest: "/etc/php/{{ php_version }}/fpm/php.ini"
            mode: 0644
            backup: false
          notify: Restart php-fpm

        - name: "PHP CLI config /etc/php/{{ php_version }}/cli/php.ini in place"
          ansible.builtin.template:
            src: "templates/cli_php.ini.j2"
            dest: "/etc/php/{{ php_version }}/cli/php.ini"
            mode: 0644
            backup: false
          notify: Restart php-fpm

        - name: PHP-FPM www.conf pool disabled
          ansible.builtin.file:
            path: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
            state: absent
          when: ( php_www_pool_enabled is defined ) and ( not php_www_pool_enabled )
          notify: Restart php-fpm

        - name: Check and enable the www pool
          block:

            - name: Include www pool server variable checks
              ansible.builtin.include_tasks: pool_check.yml
              when: php_www_pool_pm == "dynamic"
              vars:
                php_pm: "{{ php_www_pool_pm }}"
                php_pm_max_children: "{{ php_www_pool_pm_max_children }}"
                php_pm_start_servers: "{{ php_www_pool_pm_start_servers }}"
                php_pm_min_spare_servers: "{{ php_www_pool_pm_min_spare_servers }}"
                php_pm_max_spare_servers: "{{ php_www_pool_pm_max_spare_servers }}"

            - name: PHP-FPM www.conf pool enabled
              ansible.builtin.template:
                src: templates/www.conf.j2
                dest: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
                mode: 0644
                backup: false
              notify: Restart php-fpm

          when: ( php_www_pool_enabled is not defined ) or ( php_www_pool_enabled is defined and php_www_pool_enabled )

        - name: Check the PHP-FPM configuration
          ansible.builtin.command: "php-fpm{{ php_version }} --test"
          check_mode: false
          changed_when: false
          register: php_test
          failed_when: ( "test is successful" not in php_test.stderr )
          notify: Restart php-fpm

        - name: Check that /usr/bin/crontab exists
          ansible.builtin.stat:
            path: /usr/bin/crontab
          register: php_crontab

        # The log rotates once a week by default so this is a fairly crude metric but
        # it is good enough to flag up how often the max_children limits are being hit
        - name: Cron job to email root the results of grepping the logs for PHP-FPM pm.max_children
          ansible.builtin.cron:
            name: "Grep PHP{{ php_version }} log for pm.max_children"
            hour: "06"
            minute: "01"
            job: "grep 'server reached pm.max_children setting' /var/log/php{{ php_version }}-fpm.log | awk '{ print $5 }' | sed 's/]$//' | sort | uniq -c | sort -n"
            state: "{% if php_log_grep %}present{% else %}absent{% endif %}"
          when: php_crontab.stat.exists

      when: ( ansible_local.php is not defined ) or ( ansible_local.php != php )

  tags:
    - php
...
