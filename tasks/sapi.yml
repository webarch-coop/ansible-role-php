---
- name: Configure PHP sapi
  block:

    # - name: Debug sapi
    #   ansible.builtin.debug:
    #     var: php_sapi.key
    #     verbosity: 2

    # - name: Debug modes enabled
    #   ansible.builtin.debug:
    #     var: php_sapi.value.mods_enabled
    #     verbosity: 2

    # - name: Debug existing mods enabled
    #   ansible.builtin.debug:
    #     var: ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled
    #     verbosity: 2

    - name: Disable and email module tasks
      block:

        - name: "Include disable module tasks for PHP {{ php_version.key }} SAPI {{ php_sapi.key }}"
          ansible.builtin.include_tasks: dismod.yml
          loop: "{{ ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled | difference(php_sapi.value.mods_enabled) }}"
          loop_control:
            loop_var: php_mod
          when: ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled | difference(php_sapi.value.mods_enabled) | length != 0

        - name: Enable module tasks
          block:

            - name: "Check that modules required for PHP {{ php_version.key }} SAPI {{ php_sapi.key }} are available"
              ansible.builtin.assert:
                that:
                  - php_mod in ansible_local.php.versions[php_version.key].mods_available
                fail_msg: "The PHP {{ php_version.key }} module {{ php_mod }} is not available, check that the php{{ php_version.key }}-{{ php_mod }} package is to be installed."
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              loop: "{{ php_sapi.value.mods_enabled | difference(ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled) }}"
              loop_control:
                loop_var: php_mod

            - name: "Include enable module tasks for PHP {{ php_version.key }} SAPI {{ php_sapi.key }}"
              ansible.builtin.include_tasks: enmod.yml
              loop: "{{ php_sapi.value.mods_enabled | difference(ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled) }}"
              loop_control:
                loop_var: php_mod

          when: php_sapi.value.mods_enabled | difference(ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled) | length != 0

      when: >
        ( ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled | difference(php_sapi.value.mods_enabled) | length != 0 ) or
        ( php_sapi.value.mods_enabled | difference(ansible_local.php.versions[php_version.key].sapis[php_sapi.key].mods_enabled) | length != 0 )

    - name: "Load config for PHP {{ php_version.key }} SAPI {{ php_sapi.key }}"
      ansible.builtin.slurp:
        src: "/etc/php/{{ php_version.key }}/{{ php_sapi.key }}/php.ini"
      register: php_file_b64encoded

    - name: "Set a fact for the PHP {{ php_version.key }} SAPI {{ php_sapi.key }} config"
      ansible.builtin.set_fact:
        php_config_existing: "{{ php_file_b64encoded['content'] | b64decode | community.general.jc('ini') }}"

    - name: "Debug existing PHP {{ php_version.key }} SAPI {{ php_sapi.key }} config"
      ansible.builtin.debug:
        var: php_config_existing
        verbosity: 2

    - name: "Debug proposed PHP {{ php_version.key }} SAPI {{ php_sapi.key }} config"
      ansible.builtin.debug:
        var: php_cfg.versions[php_version.key].sapis[php_sapi.key].config
        verbosity: 2

#    - name: "Loop through the proposed config for PHP {{ php_version.key }} SAPI {{ php_sapi.key }}"
#      ansible.include_tasks: config_section.yml
#      loop: "{{ php_loop | dict2items }}"
#      loop_control:
#        loop_var: cfg_sect
#      when:
#        - php_cfg.versions[php_version.key].sapis[php_sapi.key].config is defined
#        - php_cfg.versions[php_version.key].sapis[php_sapi.key].config | length > 0

  tags:
    - php
...
