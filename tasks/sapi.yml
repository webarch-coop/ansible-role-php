# Copyright 2019-2025 Chris Croome
#
# This file is part of the Webarchitects PHP Ansible role.
#
# The Webarchitects PHP Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PHP Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PHP Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PHP SAPI Modules
  block:

    - name: "{{ php_task_name }}"
      ansible.builtin.set_fact:
        php_mods_disable: "{{ php_modules | community.general.json_query(php_jpq) }}"
      vars:
        php_task_name: "Set a fact for the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that should be disabled"
        php_jpq: "[?version=='{{ php_version.version }}']|[0].sapis[?sapi=='{{ php_sapi }}'].mods_disabled|[0]"

    - name: "{{ php_task_name }}"
      ansible.builtin.debug:
        var: php_mods_disable
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      vars:
        php_task_name: "Debug the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that should be disabled"
      when: php_mods_disable is defined

    - name: "{{ php_task_name }}"
      ansible.builtin.set_fact:
        php_mods_enable: "{{ php_modules | community.general.json_query(php_jpq) }}"
      vars:
        php_task_name: "Set a fact for the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that should be enabled"
        php_jpq: "[?version=='{{ php_version.version }}']|[0].sapis[?sapi=='{{ php_sapi }}'].mods_enabled|[0]"

    - name: "{{ php_task_name }}"
      ansible.builtin.debug:
        var: php_mods_enable
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      vars:
        php_task_name: "Debug the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that should be enabled"

    - name: Run check that mods to be enabled are available in a block so debugging details can be printed with failures
      block:

        - name: "{{ php_task_name }}"
          ansible.builtin.assert:
            that:
              - php_mods_enable | ansible.builtin.difference(php_mods_available) == []
            fail_msg: "Mod(s){% for php_mod_proposed in php_mods_enable | ansible.builtin.difference(php_mods_available) %} {{ php_mod_proposed }}{% if not loop.last %},{% endif %}{% endfor %} need to be installed before they can be made available."
            quiet: "{% if ansible_check_mode | bool or ansible_verbosity >= 1 %}false{% else %}true{% endif %}"
          vars:
            php_task_name: "Ensure that mods that are required to be enabled for PHP {{ php_version.version }} {{ php_sapi }} SAPI are available"

      rescue:

        - name: Re-read Ansible local facts  # noqa: no-handler
          ansible.builtin.setup:
            filter: ansible_local

        - name: "{{ php_task_name }}"
          ansible.builtin.set_fact:
            php_rescue_packages_present: "{{ ansible_facts.ansible_local.dpkg.installed | select('regex', php_inst_regex) | sort }}"
          vars:
            php_inst_regex: "^php{{ php_version.version }}"
            php_task_name: "Set a fact for the installed PHP {{ php_version.version }} packages"

        - name: "{{ php_task_name }}"
          ansible.builtin.debug:
            var: php_rescue_packages_present
          vars:
            php_task_name: "Debug PHP {{ php_version.version }} packages present"

        - name: "{{ php_task_name }}"
          ansible.builtin.debug:
            var: php_mods_available
          vars:
            php_task_name: "Debug PHP {{ php_version.version }} mods available"

        - name: "{{ php_task_name }}"
          ansible.builtin.debug:
            var: php_mods_enable
          vars:
            php_task_name: "Debug PHP {{ php_version.version }} mods enable"

        - name: Fail as mods to be enabled are not available
          ansible.builtin.fail:

      when:
        - php_mods_enable is defined
        - php_mods_enable != []

    - name: "{{ php_task_name }}"
      ansible.builtin.command: "phpquery -d -v '{{ php_version.version }}' -s '{{ php_sapi }}' -M"
      check_mode: false
      changed_when: false
      register: php_mods_existing
      vars:
        php_task_name: "Check existing mods for PHP {{ php_version.version }} {{ php_sapi }} SAPI"

    - name: Debug phpquery results
      ansible.builtin.debug:
        var: php_mods_existing.stdout_lines
        verbosity: "{% if ansible_check_mode | bool %}2{% else %}3{% endif %}"

    - name: "{{ php_task_name }}"
      ansible.builtin.set_fact:
        php_mods_disabled: "{{ php_mods_existing.stdout_lines | select('regex', '^No module matches ') | map('regex_replace', '^No module matches ') }}"
        php_mods_enabled: "{{ php_mods_existing.stdout_lines | reject('regex', '^No module matches ') | map('regex_replace', ' .*') }}"
      vars:
        php_task_name: "Set facts for mods currently enabled and mods disabled for PHP {{ php_version.version }} {{ php_sapi }} SAPI"

    - name: "{{ php_task_name }}"
      ansible.builtin.debug:
        var: php_mods_disabled
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      vars:
        php_task_name: "Debug the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that are disabled"

    - name: Debug php_mods_disabled | ansible.builtin.type_debug
      ansible.builtin.debug:
        var: php_mods_disabled | ansible.builtin.type_debug
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: "{{ php_task_name }}"
      ansible.builtin.debug:
        var: php_mods_enabled
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"
      vars:
        php_task_name: "Debug the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that are enabled"

    - name: Debug php_mods_enabled | ansible.builtin.type_debug
      ansible.builtin.debug:
        var: php_mods_enabled | ansible.builtin.type_debug
        verbosity: "{% if ansible_check_mode | bool %}1{% else %}2{% endif %}"

    - name: "{{ php_task_name }}"
      ansible.builtin.set_fact:
        php_dismods: "{{ php_mods_disable | ansible.builtin.intersect(php_mods_enabled) }}"
      vars:
        php_task_name: "Set a fact for the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that require disabling"
      when:
        - php_mods_disable != []
        - php_mods_disable | ansible.builtin.type_debug != "NoneType"
        - php_mods_enabled != []
        - php_mods_enabled | ansible.builtin.type_debug != "NoneType"

    - name: "{{ php_task_name }}"
      ansible.builtin.set_fact:
        php_enmods: "{{ php_mods_enable | ansible.builtin.intersect(php_mods_disabled) }}"
      vars:
        php_task_name: "Set a fact for the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that require enabling"
      when:
        - php_mods_disable != []
        - php_mods_disable | ansible.builtin.type_debug != "NoneType"
        - php_mods_enabled != []
        - php_mods_enabled | ansible.builtin.type_debug != "NoneType"

    - name: Set a fact to indicate that no SAPI mods that require enabling or disabling
      ansible.builtin.set_fact:
        php_dismods: []
        php_enmods: []
      when: >-
        (php_mods_disable == []) or
        (php_mods_disable | ansible.builtin.type_debug != "NoneType") or
        (php_mods_enabled == []) or
        (php_mods_enabled | ansible.builtin.type_debug != "NoneType")

    - name: Run phpdismod
      block:

        - name: "{{ php_task_name }}"
          ansible.builtin.debug:
            var: php_dismods
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          vars:
            php_task_name: "Debug the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods to be modified using phpdismod"

        - name: "{{ php_task_name }}"
          ansible.builtin.command: "phpdismod -v '{{ php_version.version }}' -s '{{ php_sapi }}'{% for php_dismod in php_dismods %} {{ php_dismod }}{% endfor %}"
          vars:
            php_task_name: "Run phpdismod for the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods{% for php_dismod in php_dismods %} {{ php_dismod }}{% endfor %}"
          changed_when: true
          register: php_dismods_result
          failed_when: php_dismods_result.stderr_lines != []

        - name: PHP-FPM systemd unit reload
          block:

            - name: PHP FPM reloaded
              ansible.builtin.systemd_service:
                name: "php{{ php_conf_file_version }}-fpm"
                state: reloaded

            - name: Check that PHP FPM is running
              ansible.builtin.service_facts:
              register: php_service_facts
              until: php_service_facts | community.general.json_query(php_service_jpq) == "running"
              retries: 20
              delay: 1
              vars:
                php_service_jpq: 'ansible_facts.services.["php{{ php_conf_file_version }}-fpm.service"]|[0].state'

          when:
            - php_sapi is defined
            - php_sapi == "fpm"
            - php_init is defined
            - php_init == "systemd"

      when:
        - php_dismods is defined
        - php_dismods != []

    - name: Run phpenmod
      block:

        - name: "{{ php_task_name }}"
          ansible.builtin.debug:
            var: php_enmods
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"
          vars:
            php_task_name: "Debug the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods that are to be modified using phpenmod"

        - name: "{{ php_task_name }}"
          ansible.builtin.command: "phpenmod -v '{{ php_version.version }}' -s '{{ php_sapi }}'{% for php_enmod in php_enmods %} {{ php_enmod }}{% endfor %}"
          vars:
            php_task_name: "Run phpenmod for the PHP {{ php_version.version }} {{ php_sapi }} SAPI mods{% for php_enmod in php_enmods %} {{ php_enmod }}{% endfor %}"
          changed_when: true
          register: php_enmods_result
          failed_when: php_enmods_result.stderr_lines != []

        - name: PHP-FPM systemd unit reload
          block:

            - name: PHP FPM reloaded
              ansible.builtin.service:
                name: "php{{ php_conf_file_version }}-fpm"
                state: reloaded

            - name: Check that PHP FPM is running
              ansible.builtin.service_facts:
              register: php_service_facts
              until: php_service_facts | community.general.json_query(php_service_jpq) == "running"
              retries: 20
              delay: 1
              vars:
                php_service_jpq: 'ansible_facts.services.["php{{ php_conf_file_version }}-fpm.service"]|[0].state'

          when:
            - php_sapi is defined
            - php_sapi == "fpm"
            - php_init is defined
            - php_init == "systemd"

      when:
        - php_enmods is defined
        - php_enmods != []

  tags:
    - php_cfg
    - php_conf
    - php_mods
...
