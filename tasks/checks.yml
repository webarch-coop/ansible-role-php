---
- name: PHP checks
  block:

    - name: Check that depreciated variables are not used
      ansible.builtin.assert:
        that:
          - php_allow_local_infile is not defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that variables are booleans
      ansible.builtin.assert:
        that:
          - php_allow_url_include | type_debug == "bool"
          - php_mysqli_allow_local_infile | type_debug == "bool"
          - phpcli_allow_local_infile | type_debug == "bool"
          - php_opcache_enable | type_debug == "bool"
          - php_opcache_validate_permission | type_debug == "bool"
          - php_opcache_validate_root | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that the distro is Debian Bullseye or Buster
      ansible.builtin.assert:
        that:
          - ansible_distribution_release is defined
          - ansible_distribution_release is regex("^buster|bullseye$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "The Linux distro {{ ansible_distribution }} {{ ansible_distribution_release }} is not supported by this role"

    - name: Generate an array of existing PHP versions
      ansible.builtin.set_fact:
        php_versions_existing: "{{ php_versions_existing | default([]) }} + [ '{{ existing_version.key }}' ]"
      loop: "{{ ansible_local.phpquery.versions | dict2items }}"
      loop_control:
        loop_var: existing_version
        label: "{{ existing_version.key }}"
      when:
        - ansible_local.phpquery.versions is defined
        - existing_version.value.state == "present"

    - name: Debug php_versions_existing array
      ansible.builtin.debug:
        var: php_versions_existing
        verbosity: 2
      when: php_versions_existing is defined

    - name: Generate an array of proposed PHP versions
      ansible.builtin.set_fact:
        php_versions_proposed: "{{ php_versions_proposed | default([]) }} + [ '{{ proposed_version.key }}' ]"
      loop: "{{ php_versions | dict2items }}"
      loop_control:
        loop_var: proposed_version
        label: "{{ proposed_version.key }}"
      when:
        - php_versions is defined
        - proposed_version.value.state == "present"

    - name: Proposed PHP versions checks
      block:

        - name: Debug php_versions_proposed array
          ansible.builtin.debug:
            var: php_versions_proposed
            verbosity: 2

        - name: Check that for each proposed version of PHP there are not packages due to be present and absent at the same time
          ansible.builtin.include_tasks: pkg_checks.yml
          loop: "{{ php_versions_proposed }}"
          loop_control:
            loop_var: version
            label: "{{ version }}"

        - name: Debug defined SAPIs for proposed PHP versions
          ansible.builtin.debug:
            msg: "SAPI {{ php_versions[version].sapis }} is defined for PHP {{ version }}"
            verbosity: 3
          loop: "{{ php_versions_proposed }}"
          loop_control:
            loop_var: version
            label: "{{ version }}"
          when: php_versions[version].sapis is defined

        - name: Include SAPI checks for proposed PHP versions
          ansible.builtin.include_tasks: sapi_checks.yml
          loop: "{{ php_versions_proposed }}"
          loop_control:
            loop_var: version
            label: "{{ version }}"
          when: php_versions[version].sapis is defined

        - name: Generate an array of PHP versions to remove
          ansible.builtin.set_fact:
            php_versions_remove: "{{ php_versions_existing | difference(php_versions_proposed) }}"
          when:
            - ( php_versions_existing is defined ) and ( php_versions_existing != [] )
            - ( php_versions_proposed is defined ) and ( php_versions_proposed != [] )

        - name: Checks for PHP versions due to be removed
          block:

            - name: Debug php_versions_remove array
              ansible.builtin.debug:
                var: php_versions_remove
                verbosity: 2

            - name: Include SAPI checks for PHP versions due to be removed
              ansible.builtin.include_tasks: sapi_absent_checks.yml
              loop: "{{ php_versions_remove }}"
              loop_control:
                loop_var: version
                label: "{{ version }}"
              when: php_versions[version].sapis is defined

          when: ( php_versions_remove is defined ) and ( php_versions_remove != [] )

      when: ( php_versions_proposed is defined ) and ( php_versions_proposed != [] )

    - name: Generate an array of absent PHP versions
      ansible.builtin.set_fact:
        php_versions_absent: "{{ php_versions_absent | default([]) }} + [ '{{ absent_version.key }}' ]"
      loop: "{{ php_versions | dict2items }}"
      loop_control:
        loop_var: absent_version
        label: "{{ absent_version.key }}"
      when: absent_version.value.state == "absent"

    - name: Absent PHP versions checks
      block:

        - name: Debug php_versions_absent array
          ansible.builtin.debug:
            var: php_versions_absent
            verbosity: 2

        - name: Include SAPI checks for PHP versions due to be absent
          ansible.builtin.include_tasks: sapi_absent_checks.yml
          loop: "{{ php_versions_absent }}"
          loop_control:
            loop_var: version
            label: "{{ version }}"
          when: php_versions[version].sapis is defined

      when: ( php_versions_absent is defined ) and ( php_versions_absent != [] )

    # - name: Include www pool server variable checks
    #   ansible.builtin.include_tasks: pool_check.yml
    #   when: php_www_pool_pm == "dynamic"
    #   vars:
    #     php_pm: "{{ php_www_pool_pm }}"
    #     php_pm_max_children: "{{ php_www_pool_pm_max_children }}"
    #     php_pm_start_servers: "{{ php_www_pool_pm_start_servers }}"
    #     php_pm_min_spare_servers: "{{ php_www_pool_pm_min_spare_servers }}"
    #     php_pm_max_spare_servers: "{{ php_www_pool_pm_max_spare_servers }}"
    #   when: ( php_www_pool_enabled is not defined ) or ( php_www_pool_enabled is defined and php_www_pool_enabled )

  tags:
    - php
...
